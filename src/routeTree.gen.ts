/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/_admin'
import { Route as AdminIndexImport } from './routes/_admin/index'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AdminContactImport } from './routes/_admin/contact'
import { Route as AdminAboutImport } from './routes/_admin/about'
import { Route as AdminProductIndexImport } from './routes/_admin/product/index'
import { Route as AdminProductCreateImport } from './routes/_admin/product/create'
import { Route as AdminProductIdImport } from './routes/_admin/product/$id'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminContactRoute = AdminContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAboutRoute = AdminAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProductIndexRoute = AdminProductIndexImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProductCreateRoute = AdminProductCreateImport.update({
  id: '/product/create',
  path: '/product/create',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProductIdRoute = AdminProductIdImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_admin/about': {
      id: '/_admin/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AdminAboutImport
      parentRoute: typeof AdminImport
    }
    '/_admin/contact': {
      id: '/_admin/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof AdminContactImport
      parentRoute: typeof AdminImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/_admin/': {
      id: '/_admin/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/_admin/product/$id': {
      id: '/_admin/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof AdminProductIdImport
      parentRoute: typeof AdminImport
    }
    '/_admin/product/create': {
      id: '/_admin/product/create'
      path: '/product/create'
      fullPath: '/product/create'
      preLoaderRoute: typeof AdminProductCreateImport
      parentRoute: typeof AdminImport
    }
    '/_admin/product/': {
      id: '/_admin/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof AdminProductIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminAboutRoute: typeof AdminAboutRoute
  AdminContactRoute: typeof AdminContactRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminProductIdRoute: typeof AdminProductIdRoute
  AdminProductCreateRoute: typeof AdminProductCreateRoute
  AdminProductIndexRoute: typeof AdminProductIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAboutRoute: AdminAboutRoute,
  AdminContactRoute: AdminContactRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminProductIdRoute: AdminProductIdRoute,
  AdminProductCreateRoute: AdminProductCreateRoute,
  AdminProductIndexRoute: AdminProductIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AdminRouteWithChildren
  '/about': typeof AdminAboutRoute
  '/contact': typeof AdminContactRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AdminIndexRoute
  '/product/$id': typeof AdminProductIdRoute
  '/product/create': typeof AdminProductCreateRoute
  '/product': typeof AdminProductIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof AdminAboutRoute
  '/contact': typeof AdminContactRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AdminIndexRoute
  '/product/$id': typeof AdminProductIdRoute
  '/product/create': typeof AdminProductCreateRoute
  '/product': typeof AdminProductIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_admin/about': typeof AdminAboutRoute
  '/_admin/contact': typeof AdminContactRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_admin/': typeof AdminIndexRoute
  '/_admin/product/$id': typeof AdminProductIdRoute
  '/_admin/product/create': typeof AdminProductCreateRoute
  '/_admin/product/': typeof AdminProductIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/contact'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/product/$id'
    | '/product/create'
    | '/product'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/contact'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/product/$id'
    | '/product/create'
    | '/product'
  id:
    | '__root__'
    | '/_admin'
    | '/_admin/about'
    | '/_admin/contact'
    | '/auth/login'
    | '/auth/register'
    | '/_admin/'
    | '/_admin/product/$id'
    | '/_admin/product/create'
    | '/_admin/product/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AdminRoute: typeof AdminRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_admin",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/about",
        "/_admin/contact",
        "/_admin/",
        "/_admin/product/$id",
        "/_admin/product/create",
        "/_admin/product/"
      ]
    },
    "/_admin/about": {
      "filePath": "_admin/about.tsx",
      "parent": "/_admin"
    },
    "/_admin/contact": {
      "filePath": "_admin/contact.tsx",
      "parent": "/_admin"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/_admin/": {
      "filePath": "_admin/index.tsx",
      "parent": "/_admin"
    },
    "/_admin/product/$id": {
      "filePath": "_admin/product/$id.tsx",
      "parent": "/_admin"
    },
    "/_admin/product/create": {
      "filePath": "_admin/product/create.tsx",
      "parent": "/_admin"
    },
    "/_admin/product/": {
      "filePath": "_admin/product/index.tsx",
      "parent": "/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
